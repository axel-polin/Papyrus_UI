{
  "_from": "argon2-ffi",
  "_id": "argon2-ffi@1.1.2",
  "_inBundle": false,
  "_integrity": "sha512-X0IFE2R/pM7U0gD2SodcD4JeSJVvDJhPrSIUNYDL7fFwaVvXDUjqI04N5vE7KmGSKJ7g95ev7LabElLhTVkMyw==",
  "_location": "/argon2-ffi",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "argon2-ffi",
    "fetchSpec": "latest",
    "name": "argon2-ffi",
    "raw": "argon2-ffi",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/argon2-ffi/-/argon2-ffi-1.1.2.tgz",
  "_shasum": "9c113d0e073d123fffc2eca670188ab7c511eb70",
  "_spec": "argon2-ffi",
  "_where": "/media/user/b1d909e3-b908-4a56-af28-b34e034db41e/Documents/Projet_S8/Papyrus_UI/Server",
  "author": {
    "name": "Chris LaRose"
  },
  "bugs": {
    "url": "https://github.com/cjlarose/argon2-ffi/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "any-promise": "^1.1.0",
    "ffi-napi": "^2.4.0",
    "ref-napi": "^1.4.0"
  },
  "deprecated": false,
  "description": "Node.js bindings for argon2 password hashing and proof-of-work algorithm",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-preset-es2015": "^6.6.0",
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.1.0",
    "mocha": "^2.4.5",
    "node-gyp": "^3.3.1"
  },
  "gypfile": true,
  "homepage": "https://github.com/cjlarose/argon2-ffi#readme",
  "license": "ISC",
  "main": "lib/index.js",
  "name": "argon2-ffi",
  "optionalDependencies": {},
  "readme": "# argon2-ffi [![Build Status](https://travis-ci.org/cjlarose/argon2-ffi.svg?branch=master)](https://travis-ci.org/cjlarose/argon2-ffi)\n\nNode.js bindings for [`argon2`][argon2], the winner of the Password\nHashing Competition (PHC), and the current recommendation for\npassword storage by the [Open Web Application Security Project\n(OWASP)][owasp].\n\n`argon2-ffi` supports Node v4.0 and higher. Calling CPU-intensive tasks like\npassword hashing and validation are performed asynchronously by dispatching the\nwork to a separate thread pool using [`node-ffi`, which in turn uses\n`libuv`][async-library-calls], so your main application can continue to do\nother work while these tasks are executed. All asynchronous operations return\nPromises, with a type defined by [any-promise](https://www.npmjs.com/package/any-promise).\n\n[async-library-calls]: https://github.com/node-ffi/node-ffi/wiki/Node-FFI-Tutorial#async-library-calls\n\n## Installation\n\n    npm install --save argon2-ffi\n\n## Usage\n\nThis module exports `argon2i` and `argon2d`. These are two variants\nof `argon2` with different use-cases and tradeoffs. To find which\none you should use, refer to the [`argon2` repo][argon2].\n\n\n### Hashing a password\n\n```javascript\nvar argon2i = require('argon2-ffi').argon2i;\n// var argon2d = require('argon2-ffi').argon2d; if you'd like to use argon2d\nvar crypto = require('crypto');\nvar Promise = require('bluebird');\nvar randomBytes = Promise.promisify(crypto.randomBytes);\n\nvar password = 'password1'; // Can also be a Buffer\nrandomBytes(32).then(salt => argon2i.hash(password, salt))\n  .then(console.log); // $argon2i$v=19$m=4096,t=3,p=1$c2FsdHlzYWx0$oG0js25z7kM30xSg9+nAKtU0hrPa0UnvRnqQRZXHCV8\n```\n\nIn this example,\n[crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\nis used to generate a salt. This is the best practice as the salt is guaranteed\nto be cryptographically secure. However, you can of course use your own buffer.\n\n`.hash` takes a few options, too! You can specify `timeCost` (default `3`),\n`memoryCost` (default `4096`), `parallelism` (default\n`1`), and `hashLength` (default `32`). Changing any of these parameters will\nhave an effect on the output hash.\n\n```javascript\nvar argon2i = require('argon2-ffi').argon2i;\nvar crypto = require('crypto');\nvar Promise = require('bluebird');\nvar randomBytes = Promise.promisify(crypto.randomBytes);\n\nvar password = new Buffer('password1');\nvar options = { timeCost: 4, memoryCost: 1 << 14, parallelism: 2, hashLength: 64 };\nrandomBytes(32).then(salt => argon2i.hash(password, salt, options))\n  .then(console.log); // $argon2i$v=19$m=16384,t=4,p=2$c2FsdHlzYWx0$gwJY/FsXNSR3aS1ChVTgDZ9HbF3V7sbbYE5UmQsdXFHB4Tt6/RVtFWGIIJnzZ62nL9miurrvJnxhvORK64ddFg\n```\n\nThe result of running `.hash` is a string that encodes all of the options used\nto produce the hash, so to verify passwords later, this string is all you need,\nas we'll see in the next section.\n\n### Verifying a password\n\n```javascript\nvar argon2i = require('argon2-ffi').argon2i;\n\nvar encodedHash = \"$argon2i$v=19$m=4096,t=3,p=1$c2FsdHlzYWx0$oG0js25z7kM30xSg9+nAKtU0hrPa0UnvRnqQRZXHCV8\";\nvar password = new Buffer('password1');\nargon2i.verify(encodedHash, password)\n  .then(correct => console.log(correct ? 'Correct password!' : 'Incorrect password'));\n```\n\n### Differences from node-argon2\n\n`argon2-ffi` was originally written to address [an issue][node-argon2-issue]\nwith running [`node-argon2`][node-argon2] in a web server. This was a\nnon-starter for my own projects. By using `node-ffi`, `argon2-ffi` was able to\ncircumvent the problems `node-argon2` had with Promises. `node-argon2` has\nsince resolved this issue.  `argon2-ffi` also returned Promises with\n`any-promise`, but this has since been implemented in `node-argon2` as well.\nToday, the practical differences between the two libraries are only in the\npublic APIs.\n\n[node-argon2-issue]: https://github.com/ranisalt/node-argon2/issues/33\n[node-argon2]: https://github.com/ranisalt/node-argon2\n\n## Contributing\n\nTo build:\n\n    git submodule init\n    git submodule update\n    node-gyp rebuild\n    npm run build\n\n[argon2]: https://github.com/P-H-C/phc-winner-argon2\n[owasp]: https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cjlarose/argon2-ffi.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "install": "node-gyp rebuild",
    "prepublish": "npm run build",
    "pretest": "npm run build",
    "test": "mocha --reporter spec"
  },
  "version": "1.1.2"
}
